# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'Peachblack3.ui'
#
# Created by: PyQt5 UI code generator 5.15.6
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
from PyQt5 import QtCore, QtGui, QtWidgets

import os

#+ Coulneff 16.03.2024 
# mutagen нужен для длинны музыки, но мб ты найдешь наиболее другой способ
# threading - многопоточность, нужна для того чтобы двигать ползунок
# cstfilename - хранит имя выбранного тобой файла музыки
import time # - не помню я добавлял  или нет #++ Coulneff
from mutagen.mp3 import MP3
#from threading import Thread
cstfilename = ""
#- Coulneff 16.03.2024
from PyQt5 import QtCore, QtGui, QtWidgets
import json


class Ui_Peach(object):
        def setupUi(self, Peach):
                Peach.setObjectName("Peach")
                Peach.resize(477, 538)
                Peach.setStyleSheet("background-color: qlineargradient(spread:pad, x1:0, y1:1, x2:0, y2:0, stop:0 rgba(46, 43, 52, 255), stop:1 rgba(101, 92, 85, 255));")
                self.pushbutton_play = QtWidgets.QPushButton(Peach)
                self.pushbutton_play.setGeometry(QtCore.QRect(210, 430, 51, 51))
                font = QtGui.QFont()
                font.setFamily("Ubuntu Light")
                font.setPointSize(15)
                font.setBold(False)
                font.setItalic(False)
                font.setUnderline(False)
                font.setWeight(50)
                font.setStrikeOut(False)
                font.setKerning(True)
                self.pushbutton_play.setFont(font)
                self.pushbutton_play.setMouseTracking(False)
                self.pushbutton_play.setStyleSheet("\n"
        "    background-color: rgb(94, 92, 100);\n"
        "    color: rgb(250,181,143);\n"
        "    border-radius: 25px;\n"
        "")
                self.pushbutton_play.setText("")
                icon = QtGui.QIcon()
                icon.addPixmap(QtGui.QPixmap(":/photo/Photo_on_app/pngwing.com(1).png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
                self.pushbutton_play.setIcon(icon)
                self.pushbutton_play.setIconSize(QtCore.QSize(16, 16))
                self.pushbutton_play.setCheckable(False)
                self.pushbutton_play.setChecked(False)
                self.pushbutton_play.setAutoRepeat(False)
                self.pushbutton_play.setAutoExclusive(False)
                self.pushbutton_play.setAutoDefault(False)
                self.pushbutton_play.setDefault(False)
                self.pushbutton_play.setFlat(False)
                self.pushbutton_play.setObjectName("pushbutton_play")
                self.horizontalSlider_3 = QtWidgets.QSlider(Peach)
                self.horizontalSlider_3.setGeometry(QtCore.QRect(70, 490, 341, 20))
                self.horizontalSlider_3.setStyleSheet("QSlider::groove:horizontal {\n"
        "    border-radius: 1px;       \n"
        "    height: 7px;              \n"
        "    margin: -1px 0;           \n"
        "}\n"
        "QSlider::handle:horizontal {\n"
        "    background-color: rgb(246,172,137);\n"
        "    border: 2px solid #f6ac89;\n"
        "    height: 14px;     \n"
        "    width: 12px;\n"
        "    margin: -4px 0;     \n"
        "    border-radius: 7px  ;\n"
        "    padding: -4px 0px;  \n"
        "}\n"
        "QSlider::add-page:horizontal {\n"
        "   background-color: rgb(231,221,222);\n"
        "}\n"
        "QSlider::sub-page:horizontal {\n"
        "    background: #fbac8b;\n"
        "}\n"
        "QSlider{\n"
        "background: rgb()\n"
        "}")
                self.horizontalSlider_3.setOrientation(QtCore.Qt.Horizontal)
                self.horizontalSlider_3.setObjectName("horizontalSlider_3")
                self.listWidget = QtWidgets.QListWidget(Peach)
                self.listWidget.setGeometry(QtCore.QRect(60, 80, 361, 331))
                self.listWidget.setStyleSheet("background-color: rgb(231,221,222);\n"
        "border-radius: 10px;\n"
        "")
                self.listWidget.setObjectName("listWidget")
                self.horizontalSlider = QtWidgets.QSlider(Peach)
                self.horizontalSlider.setGeometry(QtCore.QRect(60, 439, 81, 31))
                self.horizontalSlider.setStyleSheet("QSlider::groove:horizontal {\n"
        "    border-radius: 1px;       \n"
        "    height: 7px;              \n"
        "    margin: -1px 0;           \n"
        "}\n"
        "QSlider::handle:horizontal {\n"
        "    \n"
        "    background-color: rgb(246,172,137);\n"
        "    border: 2px solid #f6ac89;\n"
        "    height: 14px;     \n"
        "    width: 12px;\n"
        "    margin: -4px 0;     \n"
        "    border-radius: 7px  ;\n"
        "    padding: -4px 0px;  \n"
        "}\n"
        "QSlider::add-page:horizontal {\n"
        "   background-color: rgb(231,221,222);\n"
        "\n"
        "}\n"
        "QSlider::sub-page:horizontal {\n"
        "    background: #fbac8b;\n"
        "}\n"
        "QSlider{\n"
        "background: rgb()\n"
        "}")
                self.horizontalSlider.setOrientation(QtCore.Qt.Horizontal)
                self.horizontalSlider.setObjectName("horizontalSlider")
                self.pushbutton_add = QtWidgets.QPushButton(Peach)
                self.pushbutton_add.setGeometry(QtCore.QRect(330, 430, 41, 41))
                font = QtGui.QFont()
                font.setFamily("URW Bookman [urw]")
                font.setPointSize(20)
                self.pushbutton_add.setFont(font)
                self.pushbutton_add.setStyleSheet("background-color: rgb(94, 92, 100);\n"
        "    color: rgb();\n"
        "    border-radius: 10px;\n"
        "    border: 2px solid rgb(#f6ac89);")
                self.pushbutton_add.setObjectName("pushbutton_add")
                self.pushbutton_remove = QtWidgets.QPushButton(Peach)
                self.pushbutton_remove.setGeometry(QtCore.QRect(380, 430, 41, 41))
                font = QtGui.QFont()
                font.setFamily("URW Bookman [urw]")
                font.setPointSize(20)
                self.pushbutton_remove.setFont(font)
                self.pushbutton_remove.setStyleSheet("background-color: rgb(94, 92, 100);\n"
        "    color: rgb();\n"
        "    border-radius: 10px;\n"
        "    border: 2px solid rgb(#f6ac89);")
                self.pushbutton_remove.setObjectName("pushbutton_remove")
                self.pushbutton_next = QtWidgets.QPushButton(Peach)
                self.pushbutton_next.setGeometry(QtCore.QRect(270, 440, 41, 31))
                font = QtGui.QFont()
                font.setFamily("URW Bookman [urw]")
                font.setPointSize(15)
                self.pushbutton_next.setFont(font)
                self.pushbutton_next.setStyleSheet("background-color: rgb(94, 92, 100);\n"
        "    color: rgb();\n"
        "    border-radius: 5px;\n"
        "    border: 2px solid rgb(#f6ac89);")
                self.pushbutton_next.setObjectName("pushbutton_next")
                self.pushbutton_back = QtWidgets.QPushButton(Peach)
                self.pushbutton_back.setGeometry(QtCore.QRect(160, 440, 41, 31))
                font = QtGui.QFont()
                font.setFamily("URW Bookman [urw]")
                font.setPointSize(15)
                self.pushbutton_back.setFont(font)
                self.pushbutton_back.setStyleSheet("background-color: rgb(94, 92, 100);\n"
        "    color: rgb();\n"
        "    border-radius: 5px;\n"
        "    border: 2px solid rgb(#f6ac89);")
                self.pushbutton_back.setObjectName("pushbutton_back")
                self.widget = QtWidgets.QWidget(Peach)
                self.widget.setGeometry(QtCore.QRect(60, 10, 361, 51))
                self.widget.setStyleSheet("\n"
        "border-radius: 10px;\n"
        "background-color:      rgb(231,221,222);")
                self.widget.setObjectName("widget")
                self.lineEdit = QtWidgets.QLineEdit(self.widget)
                self.lineEdit.setGeometry(QtCore.QRect(10, 10, 271, 31))
                self.lineEdit.setStyleSheet("background-color: rgba(255,255,255);\n"
        "box-shadow: 10px 5px 0 5px rgb(0,0,0);")
                self.lineEdit.setObjectName("lineEdit")
                self.pushButton = QtWidgets.QPushButton(self.widget)
                self.pushButton.setGeometry(QtCore.QRect(290, 12, 65, 27))
                self.pushButton.setStyleSheet("background-color:      rgb(241,151,116);")
                self.pushButton.setObjectName("pushButton")
                self.verticalScrollBar = QtWidgets.QScrollBar(Peach)
                self.verticalScrollBar.setGeometry(QtCore.QRect(430, 90, 16, 311))
                self.verticalScrollBar.setStyleSheet("background-color: rgb(231,221,222);\n"
        "border-radius: 10px;")
                self.verticalScrollBar.setOrientation(QtCore.Qt.Vertical)
                self.verticalScrollBar.setObjectName("verticalScrollBar")

                self.retranslateUi(Peach)
                QtCore.QMetaObject.connectSlotsByName(Peach)

        def retranslateUi(self, Peach):
                _translate = QtCore.QCoreApplication.translate
                Peach.setWindowTitle(_translate("Peach", "Form"))
                self.pushbutton_add.setText(_translate("Peach", "+"))
                self.pushbutton_remove.setText(_translate("Peach", "-"))
                self.pushbutton_next.setText(_translate("Peach", ">"))
                self.pushbutton_back.setText(_translate("Peach", "<"))
                self.pushButton.setText(_translate("Peach", "🍑"))



        def toggle_sound(self):
                global cstfilename
                if self.is_playing:
                        self.is_playing = False
                        self.sound_mixer.music.stop()


                        icon = QtGui.QIcon()
                        icon.addPixmap(QtGui.QPixmap(":/photo/Photo_on_app/pngwing.com(1).png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
                        self.pushbutton_play.setIcon(icon)
                        self.pushbutton_play.setIconSize(QtCore.QSize(13, 13))
                        
                else:
                        data = []
                        with open("music_list.json", 'r') as f:
                                data = json.load(f)

                        item = self.listWidget.currentItem()
                        if item:
                                #+ sonya_marmeladova 22.03.2024
                                file_name = item.text()  # Добавляем расширение .mp3
                                filename = os.path.join(self.dir, file_name)
                                for itm in data:
                                    pathInfo = str(itm["filename"])
                                    textItem = item.text()
                                    print(pathInfo.find(textItem))
                                    if pathInfo.find(textItem) != -1:
                                            filename = pathInfo
                                            break
                                    else:
                                            continue
                                #- sonya_marmeladova22.03.2024

                                #+ Coulneff 16.03.2024 - нужен лишь чтоб получить файл который мы выбрали для воспроизведения
                                cstfilename = filename
                                #- Coulneff 16.03.2024
                                self.sound_mixer.music.load(filename)
                                self.sound_mixer.music.play()
                                self.is_playing = True

                                
                                icon2 = QtGui.QIcon()
                                icon2.addPixmap(QtGui.QPixmap(":/photo/Photo_on_app/pngwing.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
                                self.pushbutton_play.setIconSize(QtCore.QSize(16, 16))
                                self.pushbutton_play.setIcon(icon2)
        
        #+ Coulneff 16.03.2024
        # Из минусов этого варианта, нужно стопать процесс в многопоточности, иначе будет работать в фоне -> кушать оперативку, но вроде не очень и заметно
        # Работате в бесконечном цикле, и если замечает что запустилась музыка, получает её длинну и потом двигает ползунок
        # Иначе всё сбрасывает и дальше бесконечно проверяет
        def switcherNeff(self,Form):
                locrs = True
                it = 0
                while True:
                        if (self.is_playing):
                                if locrs:
                                        it = 0
                                        locrs = False
                                        self.horizontalSlider_3.setMinimum(0)
                                        audio = MP3(cstfilename) 
                                        self.horizontalSlider_3.setMaximum(int(audio.info.length)) 
                                        
                                else:
                                        self.horizontalSlider_3.setValue(it)
                                        time.sleep(1)
                                        it += 1
                        else:
                                it = 0
                                locrs = True
                                self.horizontalSlider_3.setValue(0)
        #- Coulneff 16.03.2024

if __name__ == "__main__":
        import sys
        app = QtWidgets.QApplication(sys.argv)
        Form = QtWidgets.QWidget()
        ui = Ui_Peach()
        ui.setupUi(Form)
        Form.show()
        sys.exit(app.exec_())